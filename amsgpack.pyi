from typing import TypeAlias, Final, Protocol, Any, Callable, final
from collections.abc import Sequence
from datetime import datetime

__version__: str

@final
class Timestamp:
    def __init__(self, seconds: int, nanoseconds: int = 0) -> None: ...
    seconds: Final[int]
    nanoseconds: Final[int]
    def __eq__(self, value: object) -> bool: ...
    def __ge__(self, value: object) -> bool: ...
    def __gt__(self, value: object) -> bool: ...
    def __le__(self, value: object) -> bool: ...
    def __lt__(self, value: object) -> bool: ...
    def __ne__(self, value: object) -> bool: ...
    def __hash__(self) -> int: ...

@final
class Ext:
    code: Final[int]
    data: Final[bytes]
    def __init__(self, code: int, data: bytes) -> None: ...
    def is_timestamp(self) -> bool: ...
    def default(self) -> Ext | datetime: ...
    def to_timestamp(self) -> Timestamp: ...
    def to_datetime(self) -> datetime: ...
    def __hash__(self) -> int: ...
    def __eq__(self, value: object) -> bool: ...
    def __ne__(self, value: object) -> bool: ...

@final
class Raw:
    data: Final[bytes]
    def __init__(self, data: bytes) -> None: ...

Immutable: TypeAlias = (
    str | int | float | bool | Ext | Raw | datetime | Timestamp | None
)
Value: TypeAlias = dict[Immutable, "Value"] | Sequence["Value"] | Immutable
ExtHook: TypeAlias = Callable[[Ext], Any] | None

@final
class Unpacker:
    def __init__(
        self, *, tuple: bool = False, ext_hook: ExtHook = None
    ) -> None: ...
    def feed(self, data: bytes) -> None: ...
    def reset(self) -> None: ...
    def unpackb(self, obj: bytes) -> Value: ...
    def __iter__(self) -> "Unpacker": ...
    def __next__(self) -> Value: ...

class BinaryStream(Protocol):
    def read(self, size: int | None = -1, /) -> bytes: ...

@final
class FileUnpacker:
    def __init__(
        self,
        file: BinaryStream,
        size: int | None = -1,
        *,
        tuple: bool = False,
        ext_hook: ExtHook = None,
    ) -> None: ...
    def __iter__(self) -> FileUnpacker: ...
    def __next__(self) -> Value: ...

def packb(obj: Value) -> bytes: ...
def unpackb(obj: bytes) -> Value: ...
